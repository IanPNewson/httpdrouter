package org.iannewson.httpdrouter.routes

import fi.iki.elonen.NanoHTTPD
import fi.iki.elonen.NanoHTTPD.IHTTPSession
import fi.iki.elonen.NanoHTTPD.Response
import org.iannewson.httpdrouter.dependencyinjection.DIContext
import org.iannewson.httpdrouter.routes.authentication.Authenticator

/**
 * Represents an action route that processes a request using a custom handler function.
 *
 * This class is useful for defining dynamic routes where the response logic is implemented
 * as a lambda or function. It can optionally require authentication via an `Authenticator`.
 *
 * @property path The relative path for the route (e.g., "api/action").
 * @property authenticationHandler An optional handler to perform authentication for the route.
 * @property handler A lambda function that takes an `IHTTPSession` and returns a `Response`.
 */
class Action(
    path: String,
    authenticationHandler: Authenticator? = null,
    private val handler: (session: IHTTPSession) -> Response
) : Route(path, authenticationHandler = authenticationHandler), RouteHandler {

    /**
     * Returns the current instance as the route handler.
     *
     * Since `Action` implements `RouteHandler`, it directly handles the HTTP request logic.
     *
     * @param diContext The dependency injection context (not used here, but required by the base class).
     * @return This `Action` instance.
     */
    override fun getRouteHandler(diContext: DIContext): RouteHandler = this

    /**
     * Processes an incoming HTTP session by invoking the custom handler function.
     *
     * @param session The HTTP session containing the request details.
     * @return The HTTP response generated by the handler function.
     */
    override fun getResponse(session: NanoHTTPD.IHTTPSession): NanoHTTPD.Response {
        return handler(session)
    }
}
